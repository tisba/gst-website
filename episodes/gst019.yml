--- !ruby/struct:Episode
number: 19
name: Weg von .NET & Windows
subtitle: Mit Stefan Schiffer (@scrat0105) über die Wandlung eines Unternehmens
length: 4645
media:
  mp3:
    size: 56023780
    file_ext: mp3
  descr:
    size: 21437
    file_ext: json
  opus:
    size: 38208953
    file_ext: opus
  input:
    size: 821063214
    file_ext: unprocessed.aif
  aac:
    size: 34243159
    file_ext: m4a
  alac:
    size: 318618159
    file_ext: m4a
auphonic_uuid: m5mfp7HBTyrSoet5MQKPj9
published_at: 2013-07-27 16:29:29.728680000 +02:00
summary: "**Synopsis**: Wir hatten dieses Mal Stefan Schiffer (@scrat0105) zu Gast.
  Er berichtet von dem doch sehr radikalen Wandel seines Arbeitgebers: Von On-Premise
  zu SaaS und Cloud, von Wasserfall-Prozessen hin zu Agiler Softwareentwicklung und
  von .NET & Windows zu Ruby & Linux. Stefan erzählt, woher der Wandel kommt und wie
  er den Wandel von Anfang an miterlebt hat.\r\n\r\n### Intro (00:00:00)\r\n\r\n  *
  Kurz in eigener Sache\r\n    * opus-Feed: http://geekstammtisch.de/episodes.opus.rss\r\n
  \   * Rheinklick: Die digitale Offensive des Kölner Stadt-Anzeiger rund um die Kölner
  Tech-Szene\r\n    * der Geekstammtisch beim Rheinklick-Blog: http://www.ksta.de/rheinklick/podcast-des-geekstammtischs-gruende--in-koeln-zu-gruenden,22789250,23728778.html\r\n
  \   * Wir sind auf dem Railscamp\r\n\r\n### Unser Gast (00:03:24)\r\n\r\n  * Stefan
  Schiffer: @scrat0105, https://www.xing.com/profiles/Stefan_Schiffer8\r\n  * hört
  gern denn Geekstammtisch <3\r\n  * hat mit Dirk und Basti Medieninformatik an der
  FH Köln studiert\r\n  * wollte immer in Richtung UX\r\n  * macht seit ~2 Jahren
  Rails\r\n  * explizite Stellen für Interaction Design sind eher unüblich\r\n\r\n###
  \ InVision (00:06:02)\r\n\r\n  * Stefan arbeitet bei InVision AG: http://www.invision.de\r\n
  \ * InVision ein solides mittelstänidges Unternehmen aus der klassichen B2B On Premise
  Welt\r\n  * Jetzt allerdings radikaler Wandel: Weg von On Premise hin zur Cloud
  und zu SaaS\r\n  * InVision stellt Software für die Personaleinsatzplanung wie etwa
  Personal-Forecasting her\r\n  * Vor 3-4 Jahren kam die Erkenntnis, dass man sich
  technologisch modernisieren muss\r\n  * War mit der damaligen Software schwierig
  bis unmöglich\r\n  * Daher war eine Schnitt unvermeidbar\r\n  * InVision ist _kein_
  Startup\r\n  * Mittlerweile hat sich eine \"Startup-Mentalität\" eingestellt\r\n
  \   * Von Individualsoftware hin zu webbasierten Diensten\r\n    * Das UX-Team kommt
  hier viel besser zum Einsatz\r\n  * Vorher gab es eine C#/.NET-basierte Lösung mit
  viel lizensierter Drittanbietersoftware\r\n  * Das neue, Rails-basierte Produkt
  ist noch nicht in Gänze live\r\n  * Das Ziel ist, dass das neue Produkt das alte
  irgendwann ablöst\r\n  * Die alte Software lebt nun auch in der Cloud und wird weiterhin
  betrieben\r\n  * Diese Lösung ist auch schon als Saas verfügbar\r\n  * Neue Kompotenten
  greifen auch noch teilweise auf die alte Software zu\r\n  * Bestandskunden wechseln
  nach und nach auf die Cloud-basierte Variante\r\n  * Vor allem sehr große Kunden
  sind noch auf der On Premise Version\r\n  * Die Cloud der Wahl ist AWS (inkl. Windowsserver
  für die alte Umgebung)\r\n  * Kunden, die die On Premise Lösung einsetzen können
  bereits auf neue Clouddienste zugreifen\r\n    * Beispiel dafür ist das Cloud-basierte
  Forecasting, was bereits jetzt einen Mehrwert bietet\r\n    * Bedingt dadurch hat
  man nicht nur einmalige Migrationen von Altdaten, sondern auch eine konstante Verbindung
  zwischen den Systemen\r\n  * 80% der Entwickler arbeiten auf dem neuen System, 20%
  arbeiten an der Pflege des Altsystems\r\n  * Entwicklung findet an drei Standorten
  statt (Derry/Londonderry, Ratingen, Leipzig)\r\n  * Jeder Standort hat mehrere Teams
  für unterschiedliche Komponenten der Software\r\n  * Neben den Entwicklungsteams,
  gibt es noch Service-Teams für UX und Technical Writing, die allen Teams zur Verfügung
  stehen\r\n  * Es gibt ein Operations-Team in Derry/Londonderry und es wird ein DevOps-Team
  in Ratingen aufgebaut\r\n  * 50-60 Menschen in der Produktentwicklung\r\n\r\n###
  Out of the Dark (00:17:40)\r\n\r\n  * Was war der Auslöser für den radikalen Wandel?\r\n
  \   * Technologische Erweiterbarkeit war nicht mehr gegeben\r\n    * Zwei Möglichkeiten:
  Entweder radikal aufräumen, oder von Vorne anfangen\r\n    * Man war von der Cloud
  und ihren Möglichkeiten für den Anwendungsfall überzeugt\r\n  * Erst kam der Switch
  zur Cloud und erst danach der Wechsel der Technologie\r\n  * Gleichzeitig mit der
  Technologie wurde der Entwicklungsprozess und die Unternehmensstruktur radikal geändert\r\n
  \ * Wichtig war, dass die Unternehmensführung zu 100% dahinter steht\r\n  * Ja,
  es sind Leute auf der Strecke geblieben: Es sind mehr Leute gegangen als die normale
  Fluktuation\r\n  * Die Änderung der Unternehmensstruktur war im Nachgang eine Bedingung
  für den neuen Prozess\r\n  * Mitarbeiter müssen Verantwortung übernehmen\r\n  *
  Vorteil: Fachwissen gefestigt, Probleme bekannt und weitestgehend gelöst, Kundenstamm
  vorhanden\r\n  * Nachteil: Niemand kannte Rails, niemand war firm in agiler Softwareentwicklung\r\n
  \ * Zu Beginn Scrum nach Lehrbuch inkl. externen Trainings\r\n  * Heute wird Scrum
  _nicht_ in Reinform gemacht, was die typische Entwicklung ist\r\n\r\n### Von C#
  hin zu Rails (00:26:38)\r\n\r\n  * Schwerfällige Entwicklung\r\n  * Automatisiertes
  Testing nur sehr schwer möglich\r\n  * In der C#-Welt ist Open-Source nicht sehr
  populär\r\n  * Entscheidung für Rails ist eher spontan gefallen\r\n    * Prototypen
  wurden mit Rails erstellt und das Vorgehen hat überzeugt\r\n    * Danach hat man
  sich entschieden, dass man einfach weiter darin arbeitet und die Prototypen noch
  mal neumacht\r\n  * Lizensierung und deren Kosten ein tatsächliches Problem\r\n
  \ * Kosten für die Server in der Cloud waren auch ein Problem\r\n  * Herausforderungen
  beim Umstieg auf Rails war vor allem zu lernen was es bedeutet Web-Anwendungen zu
  schreiben\r\n  * Ansonsten die üblichen Probleme: Neue Sprache, neues Framework,
  neues Paradigma\r\n  * QA musste lernen Tests zu schreiben\r\n  * Keine IDE mehr,
  sondern arbeiten mit Texteditor und CLI, vor allem durch den \"Wegfall\" des Debuggers\r\n
  \ * \"Ich kann gar nicht mehr debuggen\"\r\n  * Zudem kam auch noch ein Wechsel
  des Betriebssystems ^^\r\n  * Man musste auch lernen wie man deployed und Server
  provisioniert\r\n  * Jenkins zur Realisierung der Deployment-Pipeline\r\n  * Provisionierung
  der Server mit Chef\r\n  * Genutzte Dienste von AWS: Vor allem EC2, ELB und S3\r\n
  \ * DB wird selber auf EC2 gehostet\r\n  * Basti weist mal wieder darauf hin, dass
  AWS sich nur lohnt, wenn man es richtig nutzt und automatisch provisioniert\r\n
  \ * Stefan erzählt, dass sie am Anfang EC2 \"nur\" als Server in der Cloud gesehen
  haben und erst den richtigen Umgang lernen mussten\r\n  * Stefan meint, sie sind
  fast fertig, aber fertig wird man ja eh nicht\r\n  * Initiale Wissenslücke durch
  Trainings, Workshops und Self-Training geschlossen\r\n  * Man musste lernen, dass
  man seinen eigenen Code auch mal wegwerfen muss\r\n\r\n### Agile Softwareentwicklung
  (00:38:20)\r\n\r\n  * Während der Umstellung auf neue Technologien hat man sich
  die Frage gestellt, warum schreiben wir eigentlich Spezifikationen? Am Ende kommt
  eh nicht das raus, was der Kunde wollte?\r\n  * Die häufigste Antwort auf diese
  Fragen war: Im besten Fall war es überflüssig, aber in der Regel hat es Nachteile
  gebracht.\r\n  * Und was ist eigentlich dieses Scrum?\r\n  * SaaS eignet sich perse
  nicht für Wasserfall, man muss viel schneller reagieren können\r\n  * Man hört ganz
  anders auf die Kunden: Nicht mehr der einzelne zählt, sondern der Bedarf des Marktes\r\n
  \ * Dadurch musste auch der Produktbereich umlernen bzw. überhaupt aufgebaut werden\r\n
  \ * Entscheidungen über Produktänderungen werden vor allem in den einzelnen Teams
  getroffen\r\n  * Am Anfang war es schwierig ein Produkt ohne echte Kunden zu entwickeln\r\n
  \ * Die Lücke musste durch internes Know-How geschlossen werden\r\n  * Das machte
  auch Reviews schwierig\r\n  * Mittlerweile haben alle Teams den selben Sprint-Rythmus
  und machen ihr Review gemeinsam in einem Conference-Call\r\n  * Stefan ist zufrieden
  mit dem Transformationsprozess\r\n  * besondere positive Aspekte, der Mehrwert der
  Umstellung\r\n    * direktes und schnelles Feedback\r\n    * worst-case werden nur
  1-2 Sprints an Zeit \"weggeworfen\"\r\n  * Retrospektiven werden noch etwas stiefmütterlich
  behandelt\r\n  * Teams arbeiten sehr eigenverantwortlich\r\n    * jedes Team betreibt
  ihre eigenen Komponenten/Module\r\n    * organisieren selbst Urlaub im Team\r\n
  \ * Standortübergreifende Kommunikation ist eine Herausforderung\r\n    * Module,
  die enger zusammenarbeiten und direkte Abhängigkeiten haben, sind nach Möglichkeit
  am selben Standort angesiedelt\r\n    * Ausnahme, das UX Team: Das Team ist verteilt
  und unterstüzt die anderen Teams\r\n  * Technologie/Architekturentscheidungen werden
  in einer Art Architekturboard getroffen, nachdem es Vorschläge und Bewertungen aus
  dem jeweiligen Team gab.\r\n\r\n### Technical Depts, eigene gems als externe Dependencies
  (00:54:19)\r\n\r\n  * \"Technische Schulden\" hat jeder, egal wie jung oder alt
  ein Projekt ist\r\n  * Es gibt ein paar Regeln, wie mit Technical Depts umzugehen
  ist:\r\n    * erst kommen Bugs, dann Technical Depts und dann User Features\r\n
  \ * interne gems, werden von den Teams wie externe Dependencies verwendet (mit Pull
  Requests, Forks usw.)\r\n  * dadurch, dass alle Teams quasi eigene Rails Apps entwickeln,
  sind die Teams relativ unabhängig von Entscheidungen, wie erb vs HAML oder CSS/SCSS/…\r\n
  \ * mitlerweile wird nur noch HAML benutzt: http://haml.info/\r\n\r\n### Lernprozesse
  & Kulturwandel (01:01:25)\r\n\r\n  * Andauernder Learnprozess, viele Fehler, viel
  gelernt\r\n  * Zusammen mit dem technischen Wandel gab es auch einen starken \"kulturellen\"
  Wandel\r\n    * neuer Entwicklungsansatz, neue Motiviation gute Qualität abzuliefern\r\n
  \   * Collective (code) Ownership: http://www.extremeprogramming.org/rules/collective.html\r\n
  \   * ständier Lern- und Verbesserungsprozess\r\n\r\n### APIs, Service-Orientierung
  (01:03:47)    \r\n\r\n  * Die bisherige On-Premise-Lösung war nicht Service-orientiert\r\n
  \ * Jetzt geht es schon mehr in diese Richtung\r\n  * z.B. gibt es ein zentrales
  User-Management (Service)\r\n    * API spricht JSON via HTTP\r\n    * wird bereitgestellt
  durch gems\r\n  * Services/Module haben ihre eigenen Datenbanken\r\n\r\n### Zum
  Abschluss (01:09:12)\r\n\r\n  * Wir sind beeindruckt von dem doch radikalen und
  positiven Wandel, den Stefan beschrieben hat\r\n  * Wir sind uns einig, dass ein
  ganzheitlicher Ansatz am erfolgversprechendsten ist\r\n  * InVision sucht noch Entwickler
  und vor allem Leute, die DevOps machen wollen\r\n  * Basti hat eine Mail mit Jobangebot
  bekommen, worin mit einem Foto von Clubmate im Kühlschrank geworben wurde :)\r\n
  \ * Mate gibt es bei InVision noch nicht, aber es wird gegrillt (reicht nicht ganz
  ^^)"
chapters:
- !ruby/struct:Chapter
  start: '00:00:00'
  title: Intro
- !ruby/struct:Chapter
  start: '00:03:24'
  title: Unser Gast
- !ruby/struct:Chapter
  start: '00:06:02'
  title: InVision
- !ruby/struct:Chapter
  start: '00:17:40'
  title: Out of the Dark
- !ruby/struct:Chapter
  start: '00:26:38'
  title: Von C# hin zu Rails
- !ruby/struct:Chapter
  start: '00:38:20'
  title: Agile Softwareentwicklung
- !ruby/struct:Chapter
  start: '00:54:19'
  title: Technical Depts, eigene gems als externe Dependencies
- !ruby/struct:Chapter
  start: '01:01:25'
  title: Lernprozesse & Kulturwandel
- !ruby/struct:Chapter
  start: '01:03:47'
  title: APIs, Service-Orientierung
- !ruby/struct:Chapter
  start: '01:09:12'
  title: Zum Abschluss
